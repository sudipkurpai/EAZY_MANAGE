/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eazy_mng;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author RAGHUNATH DAS
 */
public class WORKING_REPORT extends javax.swing.JFrame {
    String dd=null;
    String tt =null;
    String empi=null;
    String time = null;
     String date = null;
    
     String ph = null;
     String Name = null;
     String Id = null;
     String emll = null;

    /**
     * Creates new form EMOPLOYEE_REOPRT2
     */
    public WORKING_REPORT() throws ParseException {
        initComponents();
        date();
        time();
        pp1.setVisible(false);
        p01.setVisible(false);
        p02.setVisible(false);
        tp1.setEditable(false);
        te.setEditable(false);
        tl.setEditable(false);
        tl2.setEditable(false);
        ta.setEditable(false);
        ta2.setEditable(false);
        dep.setEditable(false);
        en.setEditable(false);
        String dd = 31 + "-" + 12 + "-" + 0001;

Date date = new SimpleDateFormat("dd-MM-yyyy").parse(dd);
c3.setDate(date);
c4.setDate(date); 

     }
        
 void wr (String fullname, String mng_Id,String email,String t1,String d1,String p) {
        Name = fullname;
        Id = mng_Id;
        emll = email;
        time = t1;
        date = d1;
        ph= p;
 }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        emp = new javax.swing.JTextField();
        en = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dep = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        tp1 = new javax.swing.JTextField();
        ta2 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tl2 = new javax.swing.JTextField();
        c3 = new com.toedter.calendar.JDateChooser();
        jButton2 = new javax.swing.JButton();
        c4 = new com.toedter.calendar.JDateChooser();
        jLabel12 = new javax.swing.JLabel();
        pp1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        l1 = new javax.swing.JTable();
        p01 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        p1 = new javax.swing.JTable();
        p02 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        a1 = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        a2 = new javax.swing.JTable();
        jScrollPane6 = new javax.swing.JScrollPane();
        l2 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        p2 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        tl = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        ta = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        te = new javax.swing.JTextField();
        c2 = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        c1 = new com.toedter.calendar.JDateChooser();
        jButton1 = new javax.swing.JButton();
        drop = new javax.swing.JComboBox<>();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(0, 204, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("WORKING REPORT");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 0, 360, 75));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/close (1).png"))); // NOI18N
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
        });
        jPanel1.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 0, 20, 20));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 153), 2), "Employee Details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 18), new java.awt.Color(0, 0, 153))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 153, 51));
        jLabel2.setText("Employee ID");

        emp.setBackground(new java.awt.Color(255, 255, 255));
        emp.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        emp.setForeground(new java.awt.Color(0, 0, 204));
        emp.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));

        en.setBackground(new java.awt.Color(255, 255, 255));
        en.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        en.setForeground(new java.awt.Color(0, 0, 204));
        en.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 153, 51));
        jLabel7.setText("Employee Name");

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 153, 51));
        jLabel8.setText("Department");

        dep.setBackground(new java.awt.Color(255, 255, 255));
        dep.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        dep.setForeground(new java.awt.Color(0, 0, 204));
        dep.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 153, 51));
        jLabel9.setText("Total Pesent");

        tp1.setBackground(new java.awt.Color(255, 255, 255));
        tp1.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        tp1.setForeground(new java.awt.Color(0, 0, 204));
        tp1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        tp1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tp1ActionPerformed(evt);
            }
        });

        ta2.setBackground(new java.awt.Color(255, 255, 255));
        ta2.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        ta2.setForeground(new java.awt.Color(0, 0, 204));
        ta2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));

        jLabel10.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(0, 153, 51));
        jLabel10.setText("Total Absent ");

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 153, 51));
        jLabel11.setText("Total Leave");

        tl2.setBackground(new java.awt.Color(255, 255, 255));
        tl2.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        tl2.setForeground(new java.awt.Color(0, 0, 204));
        tl2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));

        c3.setDateFormatString("dd-MM-yyyy");

        jButton2.setBackground(new java.awt.Color(0, 0, 204));
        jButton2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Search");
        jButton2.setBorder(null);
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        c4.setDateFormatString("dd-MM-yyyy");

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("TO");

        pp1.setBackground(new java.awt.Color(153, 255, 255));

        l1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Leave"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(l1);

        p1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Presentt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(p1);

        javax.swing.GroupLayout p01Layout = new javax.swing.GroupLayout(p01);
        p01.setLayout(p01Layout);
        p01Layout.setHorizontalGroup(
            p01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        p01Layout.setVerticalGroup(
            p01Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p01Layout.createSequentialGroup()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        a1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Absent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(a1);

        javax.swing.GroupLayout p02Layout = new javax.swing.GroupLayout(p02);
        p02.setLayout(p02Layout);
        p02Layout.setHorizontalGroup(
            p02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(p02Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 49, Short.MAX_VALUE))
        );
        p02Layout.setVerticalGroup(
            p02Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, p02Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        a2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Absent"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(a2);

        l2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Leave"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(l2);

        p2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Presentt"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane7.setViewportView(p2);

        javax.swing.GroupLayout pp1Layout = new javax.swing.GroupLayout(pp1);
        pp1.setLayout(pp1Layout);
        pp1Layout.setHorizontalGroup(
            pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pp1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(128, 128, 128)
                .addComponent(p02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(69, 69, 69)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addComponent(p01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(122, 122, 122))
            .addGroup(pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pp1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        pp1Layout.setVerticalGroup(
            pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pp1Layout.createSequentialGroup()
                .addGroup(pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pp1Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(p01, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pp1Layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addGroup(pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(p02, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pp1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pp1Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jButton6.setBackground(new java.awt.Color(255, 0, 0));
        jButton6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Reset");
        jButton6.setBorder(null);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(emp, javax.swing.GroupLayout.PREFERRED_SIZE, 325, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(c3, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(c4, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(23, 23, 23))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(en, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ta2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 151, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dep, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tl2, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tp1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap())
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addComponent(pp1, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(196, 196, 196))))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(emp)
                            .addComponent(c3, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(c4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(en, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dep, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tp1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ta2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(tl2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(pp1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 360, 1120, 270));

        table1.setBackground(new java.awt.Color(255, 255, 255));
        table1.setForeground(new java.awt.Color(0, 0, 0));
        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Employee ID", "Employee Name", "Status", "In Time", "Out Time", "Break Time", "Date", "Department"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table1);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 1120, 220));

        tl.setBackground(new java.awt.Color(255, 255, 255));
        tl.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        tl.setForeground(new java.awt.Color(0, 0, 204));
        tl.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        jPanel2.add(tl, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 310, 110, 40));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 51));
        jLabel4.setText("Total Leave Employee : ");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 310, 190, 40));

        ta.setBackground(new java.awt.Color(255, 255, 255));
        ta.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        ta.setForeground(new java.awt.Color(0, 0, 204));
        ta.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        jPanel2.add(ta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 310, 110, 40));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 153, 51));
        jLabel5.setText("Total Absent Employee : ");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 310, -1, 40));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("TO");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 20, 50, 40));

        te.setBackground(new java.awt.Color(255, 255, 255));
        te.setFont(new java.awt.Font("Dialog", 0, 16)); // NOI18N
        te.setForeground(new java.awt.Color(0, 0, 204));
        te.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 204), 2));
        jPanel2.add(te, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 310, 110, 40));

        c2.setDateFormatString("dd-MM-yyyy");
        jPanel2.add(c2, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 160, 40));

        jLabel15.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(0, 153, 51));
        jLabel15.setText("Total Present  Employee :");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 310, 200, 40));

        c1.setDateFormatString("dd-MM-yyyy");
        jPanel2.add(c1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 160, 40));

        jButton1.setBackground(new java.awt.Color(0, 0, 204));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Search");
        jButton1.setBorder(null);
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 20, 110, 40));

        drop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All", "Total Present", "Total Leave", "Total Absent" }));
        jPanel2.add(drop, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 20, 190, 40));

        jButton5.setBackground(new java.awt.Color(255, 0, 0));
        jButton5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("Reset");
        jButton5.setBorder(null);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 20, 90, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1145, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 642, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_jButton1MouseClicked
void date() {
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("yyyy-MM-dd");
        dd=s.format(d);
    }

    void time() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date d = new Date();
                SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
                tt= s.format(d);
            }
        }
        ).start();

    }
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
         if(c1.getDate()!=null&& c2.getDate()==null){
            JOptionPane.showMessageDialog(this, "Insert Both Date First");
        }else 
         if(c1.getDate()== null && c2.getDate()!= null){
            JOptionPane.showMessageDialog(this, "Insert Both Date First");
        }else{
            
  if (drop.getSelectedItem().equals("All")){
               
                if(c1.getDate()==null&& c2.getDate()==null){
            cc1();
            }else{
                 //   System.out.println("ddd"+c1.getDate());      
              cc2();  
            }
  }else if (drop.getSelectedItem().equals("Total Present")){
               
                if(c1.getDate()==null&& c2.getDate()==null){
            aa();
            }else{
              aa1();  
            }
        }else if(drop.getSelectedItem().equals("Total Leave")){
        
            
            if(c1.getDate()==null&& c2.getDate()==null){
            bb1();
            }else{
              bb2();  
            }
            
        }else if(drop.getSelectedItem().equals("Total Absent")){
            
            if(c1.getDate()==null&& c2.getDate()==null){
           dd1();
            }else{
                
                dd2();
            }
        }
        
    } 
    }//GEN-LAST:event_jButton1ActionPerformed
public void cc1(){
   
        try {
        
           
          String sql = "Select * From attendance Where DATE =? ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            ps.setString(1,dd);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                   rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
                   
               };
               model.addRow(o);
               //int count =table1.getRowCount();
               //  te.setText(Integer.toString(count));
              int count1 =table1.getRowCount();
                tl.setText(Integer.toString(count1));
               int count =table1.getRowCount();
                te.setText(Integer.toString(count));
                 int count3 =table1.getRowCount();
               ta.setText(Integer.toString(count3));
                
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Today");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void cc2(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
         //   System.out.println("ddd1"+d1);
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" ' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                   rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
              // int count =table1.getRowCount();
              //   te.setText(Integer.toString(count));
              p21();
       a21();
        l21();
        x1();
        y1();
        z1();
                
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void aa(){
   
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE =? and STATUS='Present' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            ps.setString(1,dd);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
               int count =table1.getRowCount();
                te.setText(Integer.toString(count));
                tl.setText("");
                ta.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Today");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void aa1(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
           // System.out.println("dd1"+d1);
           // System.out.println("dd2"+d2);
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Present'  ";
          
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                   rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
               
              int count =table1.getRowCount();
              te.setText(Integer.toString(count));
              tl.setText("");
              ta.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void bb1(){
   

        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE =? and STATUS='Leave' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            ps.setString(1,dd);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                   rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
               int count =table1.getRowCount();
                tl.setText(Integer.toString(count));
                te.setText("");
                ta.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Today");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void bb2(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Leave' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE") 
               };
               model.addRow(o);
               int count =table1.getRowCount();
               tl.setText(Integer.toString(count));
               te.setText("");
                ta.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void dd1(){
   
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE =?and STATUS='Absent' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            ps.setString(1,dd);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
               int count =table1.getRowCount();
               ta.setText(Integer.toString(count));
               tl.setText("");
                te.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Today");
                 te.setText("0");
                tl.setText("0");
                ta.setText("0");
            
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void dd2(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Absent' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("EMP_ID"),rs.getString("EMP_NAME"),rs.getString("STATUS"),rs.getString("IN_TIME"),rs.getString("OUT_TIME"),rs.getString("BREAK_TIME")
                       ,rs.getString("DATE")
               };
               model.addRow(o);
               int count =table1.getRowCount();
                ta.setText(Integer.toString(count));
              tl.setText("");
                te.setText("");
                }while (rs.next()); 
               
                
            }else {
                JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
                te.setText("0");
                tl.setText("0");
                ta.setText("0");
            
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        c1.setDate(null);
        c2.setDate(null);
//        te.setText("");
//        tl.setText("");
//        ta.setText("");
        
        int count1 =table1.getRowCount();
                tl.setText(Integer.toString(count1));
               int count =table1.getRowCount();
                te.setText(Integer.toString(count));
                 int count3 =table1.getRowCount();
               ta.setText(Integer.toString(count3));
        
        if (drop.getSelectedItem().equals("All")){
               
           
            cc1();
            
  }else if (drop.getSelectedItem().equals("Total Present")){
               
                
            aa();
            
        }else if(drop.getSelectedItem().equals("Total Leave")){
         bb1();
            
        }else if(drop.getSelectedItem().equals("Total Absent")){
           
           dd1();
           
        }
        
    
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
         
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(c3.equals("31-12-0001")||c4.equals("31-12-0001")){
            JOptionPane.showMessageDialog(this, "Date Choose From  Calendar ");
        }else{
        empi=emp.getText();
        p2();
        a2();
        l2();
        x();
        y();
        z();
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            // TODO add your handling code here:
            emp.setText("");
            en.setText("");
            tp1.setText("");
            ta2.setText("");
            tl2.setText("");
            dep.setText("");
            String dd = 31 + "-" + 12 + "-" + 0001;
            
            Date date = new SimpleDateFormat("dd-MM-yyyy").parse(dd);
            c3.setDate(date);
            c4.setDate(date);
        } catch (ParseException ex) {
            Logger.getLogger(WORKING_REPORT.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        // TODO add your handling code here:

        DASHBOARD_M dm = new DASHBOARD_M();
        dm.mngname(Name,Id,emll,ph,date,time);
        dm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jLabel18MouseClicked

    private void tp1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tp1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tp1ActionPerformed
       public void x(){
           int count2 =a1.getRowCount();
                ta2.setText(Integer.toString(count2));
             //  System.out.println("aaa"+Integer.toString(count2));
       }
       public void y(){
    int count1 =l1.getRowCount();
               tl2.setText(Integer.toString(count1));
              //  System.out.println("lll"+Integer.toString(count1));
}
       public void z(){
            int count =p1.getRowCount();
                tp1.setText(Integer.toString(count));
              //  System.out.println("ppp"+Integer.toString(count));
                 
                
       }
    
    public void l2(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c3.getDate());
         
            String d2 = s.format(c4.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Leave' and EMP_ID= '"+empi+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)l1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                rs.getString("STATUS") 
               };
               model.addRow(o);
               
                }while (rs.next()); 
               
                
            }else {
              //  JOptionPane.showMessageDialog(this, "No Leaves Found Between This Date");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
    public void p2(){
            
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c3.getDate());
         
            String d2 = s.format(c4.getDate());
           // System.out.println("dd1"+d1);
           // System.out.println("dd2"+d2);
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Present' and EMP_ID= '"+empi+"'";
          
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)p1.getModel();
            model.setRowCount(0);
//            
               if (rs.next()){
                    String na=rs.getString("EMP_NAME");
                   en.setText(na);
                do{
                 
               Object o []={
                  rs.getString("STATUS")
               };
               model.addRow(o);
               
                
                }while (rs.next()); 
                
                
            }else {
              //  JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
        }
    
public void a2(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c3.getDate());
         
            String d2 = s.format(c4.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Absent'and EMP_ID= '"+empi+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)a1.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("STATUS")
               };
               model.addRow(o);
               
                }while (rs.next()); 
               
                
            }else {
             //   JOptionPane.showMessageDialog(this, "No Attendence Found Today");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
public void x1(){
           int count2 =a2.getRowCount();
                ta.setText(Integer.toString(count2));
             //  System.out.println("aaa"+Integer.toString(count2));
       }
       public void y1(){
    int count1 =l2.getRowCount();
               tl.setText(Integer.toString(count1));
              //  System.out.println("lll"+Integer.toString(count1));
}
       public void z1(){
            int count =p2.getRowCount();
                te.setText(Integer.toString(count));
              //  System.out.println("ppp"+Integer.toString(count));
                 
                
       }
    
    public void l21(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Leave'  ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)l2.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                rs.getString("STATUS") 
               };
               model.addRow(o);
               
                }while (rs.next()); 
               
                
            }else {
              //  JOptionPane.showMessageDialog(this, "No Leaves Found Between This Date");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
    public void p21(){
            
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
           // System.out.println("dd1"+d1);
           // System.out.println("dd2"+d2);
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Present' ";
          
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)p2.getModel();
            model.setRowCount(0);
//            
               if (rs.next()){
                  //  String na=rs.getString("EMP_NAME");
                  // en.setText(na);
                do{
                 
               Object o []={
                  rs.getString("STATUS")
               };
               model.addRow(o);
               
                
                }while (rs.next()); 
                
                
            }else {
              //  JOptionPane.showMessageDialog(this, "No Attendence Found Between This Date");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
        }
    
public void a21(){
    SimpleDateFormat s=new SimpleDateFormat("yyyy-MM-dd");
            String d1 = s.format(c1.getDate());
         
            String d2 = s.format(c2.getDate());
        try {
        
             //Data fetch from database
          String sql = "Select * From attendance Where DATE between '"+d1+"' and '"+d2+" 'and STATUS='Absent'";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)a2.getModel();
            model.setRowCount(0);
            if (rs.next()){
                do{
                 
               Object o []={
                  rs.getString("STATUS")
               };
               model.addRow(o);
               
                }while (rs.next()); 
               
                
            }else {
             //   JOptionPane.showMessageDialog(this, "No Attendence Found Today");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(WORKING_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(WORKING_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(WORKING_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(WORKING_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new WORKING_REPORT().setVisible(true);
                } catch (ParseException ex) {
                    Logger.getLogger(WORKING_REPORT.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable a1;
    private javax.swing.JTable a2;
    private com.toedter.calendar.JDateChooser c1;
    private com.toedter.calendar.JDateChooser c2;
    private com.toedter.calendar.JDateChooser c3;
    private com.toedter.calendar.JDateChooser c4;
    private javax.swing.JTextField dep;
    private javax.swing.JComboBox<String> drop;
    private javax.swing.JTextField emp;
    private javax.swing.JTextField en;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable l1;
    private javax.swing.JTable l2;
    private javax.swing.JPanel p01;
    private javax.swing.JPanel p02;
    private javax.swing.JTable p1;
    private javax.swing.JTable p2;
    private javax.swing.JPanel pp1;
    private javax.swing.JTextField ta;
    private javax.swing.JTextField ta2;
    private javax.swing.JTable table1;
    private javax.swing.JTextField te;
    private javax.swing.JTextField tl;
    private javax.swing.JTextField tl2;
    private javax.swing.JTextField tp1;
    // End of variables declaration//GEN-END:variables
}
