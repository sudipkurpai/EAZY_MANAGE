/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package eazy_mng;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ganesh pradhan
 */
public class SEELS_REPORT extends javax.swing.JFrame {
    String ID = null;
    String Name = null;
    String Phone = null;
    String Email = null;
  
    String date=null;
    String time = null;
    
    /**
     * Creates new form SALES
     */
    public SEELS_REPORT() {
        initComponents();
        
        date();
        time();
        table();
    }
     void srr (String fullname, String mng_Id,String email,String t1,String d1,String p) {
       Name = fullname;
        ID = mng_Id;
        Email = email;
        time = t1;
        date = d1;
        Phone= p;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        c1 = new com.toedter.calendar.JDateChooser();
        search = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        c2 = new com.toedter.calendar.JDateChooser();
        sell_s = new javax.swing.JComboBox<>();
        sales_search = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        T1 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        D1 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        pro_id = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        prof = new javax.swing.JTextField();
        prd_nm = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        datee = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        Top = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        quanti = new javax.swing.JTextField();
        total_s = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        jPanel1.setBackground(new java.awt.Color(153, 255, 204));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Price", "Date", "Time", "Quentity", "Total Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 1090, 230));

        jPanel2.setBackground(new java.awt.Color(0, 204, 102));

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SALES REPORT");

        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/close (1).png"))); // NOI18N
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(471, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(353, 353, 353)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1150, 70));

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 0));
        jLabel3.setText("From Date");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 110, 100, 40));
        jPanel1.add(c1, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 110, 140, 40));

        search.setBackground(new java.awt.Color(102, 102, 255));
        search.setFont(new java.awt.Font("Dialog", 0, 20)); // NOI18N
        search.setForeground(new java.awt.Color(255, 255, 255));
        search.setText("Reset");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });
        jPanel1.add(search, new org.netbeans.lib.awtextra.AbsoluteConstraints(1020, 110, 103, 40));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("TO");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 110, 30, 40));
        jPanel1.add(c2, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 110, 140, 40));

        sell_s.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        sell_s.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "All sell", "Average Sell", "Minimum Sell" }));
        sell_s.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sell_sActionPerformed(evt);
            }
        });
        jPanel1.add(sell_s, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 110, 160, 40));

        sales_search.setBackground(new java.awt.Color(255, 255, 255));
        sales_search.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        sales_search.setForeground(new java.awt.Color(0, 0, 255));
        sales_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                sales_searchKeyReleased(evt);
            }
        });
        jPanel1.add(sales_search, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 110, 180, 40));

        jButton1.setBackground(new java.awt.Color(0, 255, 255));
        jButton1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("Ok");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(750, 110, 60, 40));

        jLabel10.setBackground(new java.awt.Color(0, 0, 0));
        jLabel10.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(51, 51, 51));
        jLabel10.setText("Time:");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 70, 60, 30));

        T1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        T1.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.add(T1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 70, 210, 30));

        jLabel12.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Date:");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(400, 70, 50, 30));

        D1.setFont(new java.awt.Font("Dialog", 1, 16)); // NOI18N
        D1.setForeground(new java.awt.Color(0, 0, 255));
        jPanel1.add(D1, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 70, 180, 30));

        jPanel3.setBackground(new java.awt.Color(153, 255, 204));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 255), 2), "Sell Details", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Dialog", 1, 18), new java.awt.Color(0, 0, 204))); // NOI18N
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pro_id.setBackground(new java.awt.Color(255, 255, 255));
        pro_id.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        pro_id.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(pro_id, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 230, 50));

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(153, 0, 51));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel8.setText("Quantity");
        jPanel3.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 140, 230, 30));

        prof.setBackground(new java.awt.Color(255, 255, 255));
        prof.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        prof.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(prof, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 170, 230, 50));

        prd_nm.setBackground(new java.awt.Color(255, 255, 255));
        prd_nm.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        prd_nm.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(prd_nm, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 50, 230, 50));

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(153, 0, 51));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel7.setText("Price  ");
        jPanel3.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 20, 230, 30));

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(153, 0, 51));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel4.setText("Total Price");
        jPanel3.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 140, 230, 30));

        datee.setBackground(new java.awt.Color(255, 255, 255));
        datee.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        datee.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(datee, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 50, 230, 50));

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 51));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Product ID");
        jPanel3.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, 230, 30));

        jLabel11.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(153, 0, 51));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel11.setText("Profit");
        jPanel3.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 140, 230, 30));

        jLabel9.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(153, 0, 51));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("Total Sale");
        jPanel3.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 140, 210, 30));

        jLabel13.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(153, 0, 51));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel13.setText("Date");
        jPanel3.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 20, 230, 30));

        price.setBackground(new java.awt.Color(255, 255, 255));
        price.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        price.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(price, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 50, 230, 50));

        Top.setBackground(new java.awt.Color(255, 255, 255));
        Top.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        Top.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(Top, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 170, 230, 50));

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(153, 0, 51));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel6.setText("Product Name");
        jPanel3.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 230, 30));

        quanti.setBackground(new java.awt.Color(255, 255, 255));
        quanti.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        quanti.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(quanti, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 170, 230, 50));

        total_s.setBackground(new java.awt.Color(255, 255, 255));
        total_s.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        total_s.setForeground(new java.awt.Color(0, 0, 255));
        jPanel3.add(total_s, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 170, 230, 50));

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 420, 1090, 250));

        jButton2.setBackground(new java.awt.Color(0, 255, 255));
        jButton2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jButton2.setForeground(new java.awt.Color(0, 0, 0));
        jButton2.setText("Re");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 110, 60, 40));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 697, Short.MAX_VALUE)
        );

        setSize(new java.awt.Dimension(1150, 697));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        // TODO add your handling code here:
       DASHBOARD_M dm = new DASHBOARD_M();
       dm.mngname(Name,ID,Email,Phone,date,time);
       dm.setVisible(true);
       this.dispose();
    }//GEN-LAST:event_jLabel19MouseClicked

   
    private void sales_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_sales_searchKeyReleased
        // TODO add your handling code here:
        
      
        String product_ideeeee = sales_search.getText();
        
        if(product_ideeeee.equals("")){
           
            table();
        }else{
   
        if (sell_s.getSelectedItem().equals("All sell")){
              
         
         
         // all_as();
          if(c1.getDate()== null || c2.getDate()== null){ 
         try {
        
             //Data fetch from database
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%'";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
          //  ps.setString(2,date);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
             //  String nnn =rs.getString("C_name");
             //  na.setText(nnn);
               do
               {
                   Object o []={
                      rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   
                   model.addRow(o);
               }while (rs.next());
           
           }else{
              //  JOptionPane.showMessageDialog(null,"No Bills Available Between This Date", "Something Went Wrong!!", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
          }  
         else{
          
            SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
          //  System.out.println("!@##%$$%$"+d1);
            String d2 = s.format(c2.getDate());
            
      //  if (bill_s.getSelectedItem().equals("All Bill")){
            
         try {
        
             //Data fetch from database
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%'  and Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
          //  ps.setString(2,date);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               
          
               do
               {
                   Object o []={
                     rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   model.addRow(o);
               }while (rs.next());
           }else{
            //    JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
         
            }catch(Exception e){
            System.out.println("error"+e);
            }
         }
        
          }else if (sell_s.getSelectedItem().equals("Minimum Sell")){
         //  suc_as();  
         
         if(c1.getDate()== null || c2.getDate()== null){
                  try {
                      
                  
        
             //Data fetch from database
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%' and Total_sell <= 30";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
          //  ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                       rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   model.addRow(o);
               }while (rs.next());
           }else{
             //  JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
             }else{
                try {
        
            SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
          //  System.out.println("!@##%$$%$"+d1);
            String d2 = s.format(c2.getDate());
             //Data fetch from database
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%' and Total_sell <= 30 and Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                       rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                    model.addRow(o);
               }while (rs.next());
           }else{
               // JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
            }
        
        } else if (sell_s.getSelectedItem().equals("Average Sell")){
           // can_as();
            if(c1.getDate()== null || c2.getDate()== null){
          try {
        
             //Data fetch from database
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%' and Total_sell > 30";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
         
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                        rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   model.addRow(o);
               }
               
               while (rs.next());
           }else{
            }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
            }else{
         try {
        
             SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
          //  System.out.println("!@##%$$%$"+d1);
            String d2 = s.format(c2.getDate()); 
            String sql = "Select * From sell where Product_id LIKE '%"+product_ideeeee+"%' and Total_sell >30 and Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                     rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                       model.addRow(o);
               }while (rs.next());
           }else{
              // JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
        }
         
        }
        }
            
    }//GEN-LAST:event_sales_searchKeyReleased
 public void maxa(){
         if(c1.getDate()== null || c2.getDate()== null){
          try {
        
             //Data fetch from database
            String sql = "Select * From sell where  Total_sell > 30";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
         
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                        rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   model.addRow(o);
               }
               
               while (rs.next());
           }else{
            }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
            }else{
         try {
        
             SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
          //  System.out.println("!@##%$$%$"+d1);
            String d2 = s.format(c2.getDate()); 
            String sql = "Select * From sell where  Total_sell >30 and Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                     rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                       model.addRow(o);
               }while (rs.next());
           }else{
              // JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
        
         
        }
    }
    public void all(){
       
           if(c1.getDate()== null || c2.getDate()== null){
                 try {
        
           
           String sql = "Select * From sell ";
           Connection con=DATABASE_CONNECTION.getConnection();
           PreparedStatement ps=con.prepareStatement(sql);
           ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                       rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total") };
                       model.addRow(o);
               }while (rs.next());
           }else{
                JOptionPane.showMessageDialog(null,"No Selles Available Between This Date");
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
        }else{
          
            SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
            String d2 = s.format(c2.getDate());
             
        try {
        
           
            String sql = "Select * From sell where Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                      rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total") };
                       model.addRow(o);
               }while (rs.next());
           }else{
                JOptionPane.showMessageDialog(null,"No Sells Available Between This Date");
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
        
             } 
    }
    
    public void table(){
    try {
        
             //Data fetch from database
            String sql = "Select * from sell ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            
            //ps.setString(1,product_idee);
            ResultSet rs=ps.executeQuery();
            DefaultTableModel model = (DefaultTableModel)table.getModel();
            model.setRowCount(0);
            while (rs.next()){
                 
               Object o []={
                   rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total") };
               model.addRow(o);
                 
            }
            rs.close();
            ps.close();
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
}
    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
        // TODO add your handling code here:
        sales_search.setText("");
        DefaultTableModel sudip= (DefaultTableModel)table.getModel();
        while(sudip.getRowCount()>0){
            sudip.setRowCount(0);
        } 
         pro_id.setText("");
         prd_nm.setText("");
         price.setText("");
         datee.setText("");
         quanti.setText("");
         total_s.setText("");
         Top.setText("");
         prof.setText("");
         table();
    }//GEN-LAST:event_searchActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // TODO add your handling code here:
        int i = table.getSelectedRow();
     DefaultTableModel model=(DefaultTableModel)table.getModel();
    String aaaaa= model.getValueAt(i,0).toString();
     String baaaa= model.getValueAt(i,4).toString();
    try {
        
             //Data fetch from database
            String sql = "Select * From sell Where Product_id = ? and Time = ?";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
            ps.setString(1,aaaaa);
            ps.setString(2,baaaa);
            ResultSet rs=ps.executeQuery();
            if(rs.next()){
//                rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),
//                rs.getString("Date"),rs.getString("Quantity")
//                   ,rs.getString("Total_sell"),rs.getString("Total")
                String pii =rs.getString("Product_id");
                String pnn =rs.getString("Product_name");
                 
                String prii =rs.getString("Price");
                 
                String datt =rs.getString("Date");
                 
                String qutt =rs.getString("Quantity");
              
                
                String tts =rs.getString("Total_sell");
                String tooo =rs.getString("Total");
                String prooo =rs.getString("Profit");
                pro_id.setText(pii);
               
                prd_nm.setText(pnn);
                
                price.setText(prii);
                
                datee.setText(datt);
               
                quanti.setText(qutt);
                total_s.setText(tts);
                Top.setText(tooo);
                prof.setText(prooo);
                
                
               // JOptionPane.showMessageDialog(this, "Product Found");
                
               
                rs.close();
                ps.close();
            }else{
                JOptionPane.showMessageDialog(this, "Enter Correct Empolyee Id");
                System.out.println("Enter Correct Employee Id");
            }
        }catch(Exception e){
            System.out.println("error"+e);
        }
     
    }//GEN-LAST:event_tableMouseClicked
public void mini(){
    if(c1.getDate()== null || c2.getDate()== null){
                  try {
                      
                  
        
             //Data fetch from database
            String sql = "Select * From sell where  Total_sell <= 30";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
          //  ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                       rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                   model.addRow(o);
               }while (rs.next());
           }else{
             //  JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
             }else{
                try {
        
            SimpleDateFormat s=new SimpleDateFormat("dd-MM-yyyy");
            String d1 = s.format(c1.getDate());
          //  System.out.println("!@##%$$%$"+d1);
            String d2 = s.format(c2.getDate());
             //Data fetch from database
            String sql = "Select * From sell where  Total_sell <= 30 and Date between '"+d1+"' and '"+d2+"' ";
            Connection con=DATABASE_CONNECTION.getConnection();
            PreparedStatement ps=con.prepareStatement(sql);
           // ps.setString(1,inv);
            ResultSet rs=ps.executeQuery();
           DefaultTableModel model =(DefaultTableModel)table.getModel(); 
           model.setRowCount(0);
           if(rs.next()){
               do
               {
                   Object o []={
                       rs.getString("Product_id"),rs.getString("Product_name"),rs.getString("Price"),rs.getString("Date"),rs.getString("Time"),rs.getString("Quantity")
                   ,rs.getString("Total")};
                    model.addRow(o);
               }while (rs.next());
           }else{
               // JOptionPane.showMessageDialog(null,"Enter Correct Invoice No", "Bill not Found", JOptionPane.ERROR_MESSAGE);
           }
          
            }catch(Exception e){
            System.out.println("error"+e);
        }
            }
}
    private void sell_sActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sell_sActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sell_sActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         c1.setDate(null);
         c2.setDate(null);
         table();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
          if (sell_s.getSelectedItem().equals("All sell")){
        all();
        }else   if (sell_s.getSelectedItem().equals("Minimum Sell")){ 
                mini();
        }else  if (sell_s.getSelectedItem().equals("Average Sell")){
        maxa();
        }
    }//GEN-LAST:event_jButton1ActionPerformed
    
    void date() {
        Date d = new Date();
        SimpleDateFormat s = new SimpleDateFormat("dd-MM-yyyy");
        D1.setText(s.format(d));
    }

    void time() {
        new Timer(0, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                Date d = new Date();
                SimpleDateFormat s = new SimpleDateFormat("hh:mm:ss a");
                T1.setText(s.format(d));
            }
        }
        ).start();

    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SEELS_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SEELS_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SEELS_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SEELS_REPORT.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SEELS_REPORT().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel D1;
    private javax.swing.JLabel T1;
    private javax.swing.JTextField Top;
    private com.toedter.calendar.JDateChooser c1;
    private com.toedter.calendar.JDateChooser c2;
    private javax.swing.JTextField datee;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField prd_nm;
    private javax.swing.JTextField price;
    private javax.swing.JTextField pro_id;
    private javax.swing.JTextField prof;
    private javax.swing.JTextField quanti;
    private javax.swing.JTextField sales_search;
    private javax.swing.JButton search;
    private javax.swing.JComboBox<String> sell_s;
    private javax.swing.JTable table;
    private javax.swing.JTextField total_s;
    // End of variables declaration//GEN-END:variables
}
